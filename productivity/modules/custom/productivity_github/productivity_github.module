<?php
/**
 * @file
 * Code for the Productivity Github feature.
 */

include_once 'productivity_github.features.inc';

/**
 * Implements hook_menu().
 */
function productivity_github_menu() {
  $items['payload'] = array(
    'page callback' => 'productivity_github_payload',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Create a pull request node when a pull request is opened.
 */
function productivity_github_payload() {
  if (empty($_POST['payload'])) {
    return;
  }

  $payload = json_decode($_POST['payload']);
  if (empty($payload->action) ||  $payload->action != 'opened' || empty($payload->pull_request)) {
    return;
  }

  if (variable_get('productivity_debug_payload', FALSE)) {
    watchdog('productivity', print_r($payload, TRUE));
  }

  $node = new stdClass();
  $node->title = htmlspecialchars($payload->pull_request->title, ENT_NOQUOTES, 'UTF-8');
  $node->type = 'github_issue';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->status = NODE_PUBLISHED;
  $node->uid = productivity_github_get_uid_by_github_username(check_plain($payload->pull_request->user->login));
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->field_employee->set($node->uid);
  $wrapper->field_project->set(productivity_github_get_project_by_repository($payload->pull_request->head->repo));
  $wrapper->body->value->set($payload->pull_request->body);
  $wrapper->field_issue_id->set((int)$payload->pull_request->number);
  $wrapper->field_work_date->set(strtotime($payload->pull_request->updated_at));
  $wrapper->field_github_project_id->set($payload->pull_request->head->repo->full_name);
  $wrapper->save();
}

/**
 * @param string $github_username
 *   A github username.
 *
 * @return int
 *   Account ID.
 */
function productivity_github_get_uid_by_github_username($github_username) {
  if ($uid = _productivity_github_get_entity_id_by_field_value('field_github_username', 'user', $github_username)) {
    return $uid;
  }

  watchdog('productivity', t('No user with github username: @username', array('@username' => $github_username)));
}

/**
 * @param $repository_info
 *  A github repository names.
 *
 * @return int
 *   Project node ID.
 */
function productivity_github_get_project_by_repository($repository_info) {
  // Look for one of the 3 supported name in the following order:
  // $repository_info->name - Project name (ie. generator-hedley)
  // $repository_info->owner->login - Account name (ie. Gizra)
  // $repository_info->full_name - Project name + Account (ie. Gizra/generator-hedley)

  $values = array(
    $repository_info->name,
    $repository_info->owner->login,
    $repository_info->full_name,
  );

  foreach ($values as $value) {
    if ($nid = _productivity_github_get_entity_id_by_field_value('field_github_repository_name', 'project', check_plain($value))) {
      return $nid;
    }
  }
  // Print error if no repo was found.
  watchdog('productivity', t('No project with github repository: @repository', array('@repository' => print_r($repository_info, TRUE))));
}

/**
 * Fetch an entity ID by a unique field value.
 *
 * @param $field
 *   Field name.
 * @param $bundle
 *   Entity bundle.
 * @param $value
 *   Field value.
 *
 * @return int
 *   Entity ID.
 */
function _productivity_github_get_entity_id_by_field_value($field, $bundle, $value) {
  // Using db_select to allow this query for anonymous.
  $result = db_select('field_data_' . $field, 'f')
    ->fields('f', array('entity_id'))
    ->condition('bundle', $bundle)
    ->condition($field . '_value', $value)
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  if (!empty($result['entity_id'])) {
    return $result['entity_id'];
  }
}
