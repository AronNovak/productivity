<?php
/**
 * @file
 * Code for the Productivity project feature.
 */

include_once 'productivity_project.features.inc';

/**
 * Implements hook_menu().
 */
function productivity_project_menu() {
  $items['recalculate-project-time/%node'] = array(
    'page callback' => 'productivity_project_recalculate_hours',
    'page arguments' => array(1),
    'access callback' => 'productivity_project_recalculate_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['repository_autocomplete'] = array(
    'page callback' => 'productivity_project_repository_autocomplete',
    'access callback' => TRUE,
  );

  $items['repository_autocomplete_invalidate'] = array(
    'page callback' => 'productivity_project_repository_autocomplete_invalidate',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_node_presave().
 */
function productivity_project_node_presave($node) {

}

/**
 * Implements hook_ctools_plugin_directory().
 */
function productivity_project_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Access callback; Check permissions for user and the bundle of the entity.
 *
 * @param object $node
 *  The entity.
 * @return bool
 *
 */
function productivity_project_recalculate_access($node) {
  if (!user_access('administer nodes')) {
    return FALSE;
  }

  if ($node->type != 'project') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Page callback; Recalculates the total hours and days of a project from the beginning of time.
 *
 * @param $node
 *  The "project" entity that needs hours recalculation.
 */
function productivity_project_recalculate_hours($node) {
  $wrapper  = entity_metadata_wrapper('node', $node);

  $total = productivity_time_tracking_total_hours($wrapper->getIdentifier());
  $wrapper->field_hours->set($total['hour']);
  $wrapper->field_days->set($total['day']);
  $wrapper->save();
  drupal_goto('node/' . $node->nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables the hours and days fields in Project's node edit form.
 */
function productivity_project_form_project_node_form_alter(&$form, &$form_state) {
  $form['field_hours']['#disabled'] = TRUE;
  $form['field_days']['#disabled'] = TRUE;
  $form['field_table_rate']['und'][0]['field_hours']['#disabled'] = TRUE;
  $form['field_table_rate']['und'][0]['field_days']['#disabled'] = TRUE;
  $form['field_percentage_notification']['#disabled'] = TRUE;

  // Set the repo name as autocomplete.
  foreach ($form['field_github_repository_name'][LANGUAGE_NONE] as &$element) {
    if (empty($element['value'])) {
      continue;
    }
    $element['value']['#autocomplete_path'] = 'repository_autocomplete';
  }

  $form['field_github_repository_name']['#prefix'] = l(t('Invalidate list of repositories'), 'repository_autocomplete_invalidate', array('query' => array('destination' => $_GET['q'])));
}

/**
 * Notify site managers about logged hours percentage in a project.
 *
 * The notifications percentage thresholds: 25%, 50%, 75%, 95%, 100%.
 * Calculates the percentage from the scope,
 * Checks if the project has reached a new threshold,
 * Sends a message with project details and hours percentage logged.
 *
 * @param object $node
 *  The project node.
 *
 * @return boolean
 *  Returns FALSE only if the scope is not relevant.
 *
 */
function productivity_project_logged_hours_notify($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Get the total scope (normalized as hours) , including all rate types.
  $total_scope = productivity_project_get_total_scope($wrapper);

  $total_hours = $wrapper->field_hours->value();
  $total_days = $wrapper->field_days->value();

  // Calculate the project's percentage of logged hours.
  $total_percentage = number_format(($total_hours / $total_scope) * 100, 2);

  // Send only if the project reached a new threshold and the managers were
  // never notified about it.
  $arguments = array(
    '@project_name' => $wrapper->label(),
    '@logged_percentage' => $total_percentage,
    '@project_scope' => $total_scope['interval'] . ' ' . $total_scope['period'],
    '@project_total_hours' => $total_hours,
    '@project_total_days' => $total_days,
    '@work_type' => 'Total Scope',
  );
  productivity_project_notify($wrapper, $arguments);

  // Check scope for each type
  foreach($wrapper->field_table_rate as $rate) {
    $hours = $rate->field_hours->value();
    $scope = $rate->field_scope->value();
    $scope_percentage =  number_format(($hours / $scope) * 100, 2);

    $arguments = array(
      '@project_name' => $wrapper->label(),
      '@logged_percentage' => $scope_percentage,
      '@scope' => $scope['interval'] . ' ' . $scope['period'],
      '@scope_total_hours' => $hours,
      '@scope_total_days' => $rate->field_days->value(),
      '@work_type' => $rate->field_issue_type->label(),
    );

    productivity_project_notify($wrapper, $arguments);
  }
}

/**
 * Actual notify logged hours percentage in a project or a scope.
 *
 * Checks if the project has reached a new threshold,
 * and send a message with project or scope details.
 *
 * @param $wrapper_project
 *  The project wrapper.
 * @param $arguments
 *  The email arguments.
 */
function productivity_project_notify($wrapper_project, $arguments) {
  // Notification thresholds.
  $thresholds = array(
    '100',
    '95',
    '75',
    '50',
    '25',
  );

  $percentage = $arguments['@logged_percentage'];
  $percentage_notified = $wrapper_project->field_percentage_notification->value();

  foreach ($thresholds as $threshold) {
    if ($percentage < $threshold || $percentage_notified >= $threshold || $percentage < $percentage_notified) {
      // Didn't reach a threshold OR This threshold has been already notified or
      // The current percentage has been already notified.
      continue;
    }

    // Create a message for owners.
    $values = array(
      'uid' => 1,
      'arguments' => $arguments,
    );
    $message = message_create('logged_scope_hours', $values);

    // Send the message to the owners.
    $options = array(
      'mail' =>  variable_get('productivity_time_tracking_managers_email', 'info@gizra.com'),
    );
    message_notify_send_message($message, $options);

    // Send notifications to all the team leads as well.
    if ($wrapper_project->field_team_leads->value()) {
      foreach ($wrapper_project->field_team_leads as $team_lead) {
        // Create a new message specified to the team lead.
        $values['uid'] = $team_lead->getIdentifier();
        $message = message_create('logged_project_hours', $values);
        // Send this message to the team lead.
        $options['mail'] = $team_lead->mail->value();
        message_notify_send_message($message, $options);
      }
    }

    // Save the percentage so it won't send the same.
    // message again at this threshold.
    $wrapper_project->field_percentage_notification->set($percentage);
    $wrapper_project->save();
    // Stop this loop when one notifications has been sent.
    break;
  }
}

/**
 * Get the Total project scope.
 *
 * @param $project_wrapper
 *  The project node wrapper.
 *
 * @return
 *  Scope normalized to hours
 */
function productivity_project_get_total_scope($project_wrapper) {
  $total = 0;
  foreach($project_wrapper->field_table_rate as $rate) {
    // TODO: Maybe don't count non-billable scope here ?
    $hours_per_day = 1;
    if ($rate->field_scope->period == 'day') {
      // Calculate the scope as hours, when saved as days.
      $hours_per_day = variable_get('productivity_time_tracking_hours_count_as_day', 8);
    }
    $total += ($rate->field_scope->interval->value() * $hours_per_day);
  }
  return $total;
}

/**
 * Page callback; Return list of the repositories for easy project creation.
 */
function productivity_project_repository_autocomplete($string = '') {

  $repositories = _productivity_project_build_repo_list();

  $results = array();
  foreach ($repositories as $full_name => $name) {
    if ($string && strpos($name, $string) !== FALSE) {
      $results[$full_name] = $name;
    }
  }

  drupal_json_output($results);
}

/**
 * Github API don't allow us search against repos. name. This API function will
 * build a cached version that will be invalidate each day or by a click of a
 * button.
 *
 * @return array
 *   Array of repository name as the key and the full name as the value.
 */
function _productivity_project_build_repo_list() {
  if (!productivity_project_repository_autocomplete_need_invalidate() && $results = variable_get('productivity_project_repositories')) {
    // Return the cached lists of projects.
    return $results;
  }

  $address = 'https://api.github.com/orgs/gizra/repos';
  $results = array();

  list($public, $secret) = array(variable_get('github_public'), variable_get('github_secret'));
  if ($public && $secret) {
    $query = '?client_id=' . $public . '&client_secret='. $secret . '&page=';
  }
  else {
    $query = '?page=';
  }

  $i = 1;
  while (TRUE) {
    // Get the results for the current pagination.
    $data = drupal_http_request($address . $query . $i);

    $output = drupal_json_decode($data->data);

    if ($data->code != 200) {
      $params['@error'] =  implode(' ', $output);
      $message = t('There was a problem requesting the repositories: @error', $params);
      drupal_set_message($message, 'error');
      watchdog('productivity_project', $message);
      break;
    }

    if (!$output) {
      // No more repositories. Break the loop.
      break;
    }

    foreach ($output as $repository) {
      $results[$repository['full_name']] = $repository['name'];
    }

    $i++;
  }

  variable_set('productivity_project_repositories', $results);
  variable_set('productivity_project_repositories_defined', time());
  return $results;
}

/**
 * Invalidating the list of projects.
 */
function productivity_project_repository_autocomplete_invalidate() {
  variable_set('productivity_project_repositories', NULL);
  drupal_set_message(t('The repositories list has been invalidated.'));
  $destination = !empty($_GET['destination']) ? $_GET['destination'] : '<front>';
  drupal_goto($destination);
}

/**
 * Check if we need to invalidate the repositories lists.
 *
 * @return boolean
 */
function productivity_project_repository_autocomplete_need_invalidate() {
  return REQUEST_TIME - variable_get('productivity_project_repositories_defined') >= 86400;
}

/**
 * Update scope days and scope hours if day type is regular.
 *
 * Build the scope multi field table,
 * Called every time new issue is create or update.
 *
 * @param $node
 *  Time tracking node.
 * @param $project_wrapper
 *  The originael project wrapper.
 *
 * @return string $issue_type
 *  The issue type.
 */
function productivity_project_update_project_total_hours($node, $project_wrapper) {
  $wrapper_time_tracking = entity_metadata_wrapper('node', $node);
  $wrapper_time_tracking_original = entity_metadata_wrapper('node', $node->original);

  // Add the hours by issue type.
  if($wrapper_time_tracking->field_day_type->value() == "regular") {
    $rates = isset($project_wrapper->field_table_rate) ? $project_wrapper->field_table_rate : array();

    foreach($wrapper_time_tracking->field_issues_logs as $issue_log) {
      $type = $issue_log->field_issue_type->value();

      // Check if that issue type already exist in the table.
      if (!$rate = productivity_project_check_existing_type($rates, $type)) {
        // Create new row for the issue type at the table.
        $rate = productivity_project_create_new_type($rates, $type);
        //$project_wrapper->field_table_rate->set($rates);
      }
      // Add the new issue hours.
      $rate->field_hours->set($rate->field_hours->value() + $issue_log->field_time_spent->value());
      // Check if it's existing issue.
      $existing_issue = productivity_project_check_existing_issue($wrapper_time_tracking_original->field_issues_logs, $issue_log->field_github_issue->field_issue_id->value());
      if($existing_issue) {
        // Decrease the old issue hours.
        $reduced_total = $rate->field_hours->value() - $existing_issue->field_time_spent->value();
        $rate->field_hours->set($reduced_total);
      }
    }
  }
  return $rates;
}

/**
 * Create a new row at the table for new issue type.
 *
 * @param $rates
 *  Table types array.
 * @param $new_issue
 *  The new issue wrapper to add.
 *
 * @return mixed
 *  The table with the new issue.
 */
function productivity_project_create_new_type($rates, $new_type) {
  // Get the index of the issue type in the table.
  $next_index = productivity_project_get_table_next_index($rates, $new_type);

  $rates[$next_index]->field_days->set(0);
  $rates[$next_index]->field_hours->set(0);
  $rates[$next_index]->field_issue_type->set($new_type);
  $rates[$next_index]->field_scope->interval->set(0);
  $rates[$next_index]->field_scope->period->set('hour');
  $rates[$next_index]->field_rate->amount->set(0);
  $rates[$next_index]->field_rate->currency->set('USD');
  $rates[$next_index]->field_rate_type->set('global');
  return $rates[$next_index];
}

/**
 * Check if the new issue is in the existing (old) node issues.
 *
 * Find if the new issue number (Pull Request number) is unique
 * (exist or not) at this day.
 * The numbers compares to each other are the strings before the colons.
 *
 * @param $issues_logged_original
 *  The existing issues wrapper.
 * @param $issue_id
 *  The new issue to check.
 *
 * @return
 *  The issue found or false if not found.
 *
 */
function productivity_project_check_existing_issue($issues_logged_original, $issue_id) {
  foreach($issues_logged_original as $issue) {
    if($issue->field_github_issue->field_issue_id->value() == $issue_id) {
      // This is the issue before it was save aka original.
      return $issue;
    }
  }
  return FALSE;
}

/**
 * Get the table next index.
 *
 * Find the index of the type in the table,
 * And if it's not exist, return the table length.
 * Needs to be called every time you need to find
 * where to insert the type in the table rate.
 *
 * @param $rates
 *  Rates multifield  wrapper.
 * @param $issue_type
 *  Type to check in table.
 *
 * @return int
 *  The index of the type in table.
 */
function productivity_project_get_table_next_index($rates, $issue_type) {
  foreach($rates as $index => $rate) {
    if($rate->field_issue_type->value() == $issue_type) {
      $rate_index = $index;
    }
  }

  if(!isset($rate_index)) {
    $table_index = count($rates);
  }
  return count($rates->value()) + 1;


  return $table_index;
}

/**
 * Check if the rate type already exist in the table rate.
 *
 * Find if the scope type row is already existing in the table rate.
 *
 * @param $rates_wrapper
 *  Multifield types array.
 * @param $issue_type
 *  Type to check.
 *
 * @return
 *  The rate wrapper, or flase if not found.
 */
function productivity_project_check_existing_type($rates_wrapper, $issue_type) {
  foreach($rates_wrapper as $rate) {
    if ($issue_type == $rate->field_issue_type->value()) {
      return $rate;
    }
  }
  return FALSE;
}