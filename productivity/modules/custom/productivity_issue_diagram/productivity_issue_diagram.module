<?php
/**
 * @file
 * Code for the entity relationship graph.
 */
/**
 * Implements hook_menu().
 */
function productivity_issue_diagram_menu() {
  $items['admin/reports/issue-diagram/%'] = array(
    'title' => 'Issue Diagram',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'productivity_issue_diagram_menu_callback',
    'page arguments' => array(3),
    'access arguments' => array('administer content'),
  );
  return $items;
}

/**
 * Main function to create full graph of entities.
 *
 * @param
 *  $entity_type - Pass on and anetity type to render only.
 */
function productivity_issue_diagram_menu_callback($project_nid) {
//  drupal_add_css(drupal_get_path('module', 'productivity_issue_diagram') . '/productivity_issue_diagram.css');
  drupal_add_js('http://mdaines.github.io/viz.js/bower_components/viz.js/viz.js', 'file');

  $data = 'var dataSVG = `' . productivity_issue_diagram_graph_generate(productivity_issue_diagram_graph($project_nid)) . '`;';
  drupal_add_js($data, 'inline');

  drupal_add_js(drupal_get_path('module', 'productivity_issue_diagram') . '/productivity_issue_diagram.js', 'file');
  return '';
}

/**
 * Main function to create full graph of entities.
 */
function productivity_issue_diagram_graph($project_nid) {
  $graph = array();
  $issues = productivity_issue_diagram_graph_connections($project_nid);

  $graph['nodes']['group_issue']['label'] = 'Issues';
  $graph['nodes']['group_issue']['group'] = TRUE;
  $graph['nodes']['group_pull_request']['label'] = 'PR';
  $graph['nodes']['group_pull_request']['group'] = TRUE;
  foreach ($issues as $issue) {
    $graph['nodes']['group_' . $issue['type']][$issue['nid']] = array(
//      'title' => $issue['title'],
      'title' => $issue['issue_id'],
      'issue_id' => $issue['issue_id'],
    );

    if ($issue['related_issue']) {
      $edge_info = array(
        'arrowhead' => 'Normal',
        'taillabel' => '1',
        'headlabel' => '2',
      );

      $graph['edges'][$issue['issue_id']][$issue['related_issue']] = $edge_info;
    }
  }

  return $graph;
}

/**
 * Get entity reference connections.
 */
function productivity_issue_diagram_graph_connections($project_nid) {

  // List of links for projects.
  $query = db_select('node', 'n');
  $query
    ->join('field_data_field_project', 'p', 'n.nid = p.entity_id');
  $query
    ->leftJoin('field_data_field_time_estimate', 'e', 'n.nid = e.entity_id');
  $query
    ->leftJoin('field_data_field_issue_id', 'i', 'n.nid = i.entity_id');
 $query
    ->leftJoin('field_data_field_github_content_type', 'ct', 'n.nid = ct.entity_id');
  $query
    ->leftJoin('field_data_field_issue_reference', 'ir', 'n.nid = ir.entity_id');


  $query
    ->fields('n', array('title', 'nid'))
    ->fields('e', array('field_time_estimate_value'))
    ->fields('i', array('field_issue_id_value'))
    ->fields('ct', array('field_github_content_type_value'))
    ->fields('ir', array('field_issue_reference_target_id '))
    ->condition('p.field_project_target_id', $project_nid)
    ->condition('type', 'github_issue')
    ->condition('status', NODE_PUBLISHED);
  $result = $query->execute();

  // Create an associative array:
  $issues = array();
  while($record = $result->fetchAssoc()) {
    $issues[$record['nid']] = array(
      'nid' => $record['nid'],
      'title' => $record['title'],
      'estimate' => $record['field_time_estimate_value'],
      'issue_id' => $record['field_issue_id_value'],
      'type' => $record['field_github_content_type_value'],
      'related_issue' => $record['field_issue_reference_target_id'],
    );
  }
  dpm($issues);
  return $issues;
}


/**
 * Render graph into digraph format.
 * using https://en.wikipedia.org/wiki/DOT_(graph_description_language)
 */
function productivity_issue_diagram_graph_generate($graph) {
  // Merge in defaults.
  $graph += array(
    'nodes' => array(),
    'edges' => array(),
  );
  $output = "digraph G {\n";

  $output .= "node [\n";
  $output .= "shape = \"record\"\n";
  $output .= "]\n";

  foreach ($graph['nodes'] as $name => $node_info) {
    if (!empty($node_info['group'])) {
      $output .= productivity_issue_diagram_graph_generate_subgraph($name, $node_info);
    }
    else {
      $output .= productivity_issue_diagram_graph_generate_node($name, $node_info);
    }
  }

  foreach ($graph['edges'] as $source_node => $edges) {
    foreach ($edges as $target_node => $edge_info) {
      $output .= "edge [\n";
      foreach ($edge_info as $k => $v) {
        $output .= ' "' . check_plain($k) . '" = "'. check_plain($v) . '"' . "\n";
      }
      $output .= "]\n";
      $color = productivity_issue_diagram_random_color();
      $output .= format_string('@source_node -> @target_node [color="@color"][label="(@fieldname)" fontcolor="@color"]',
        array(
          '@source_node' => $source_node,
          '@target_node' => $target_node,
          '@color' => $color,
          '@fieldname' => $edge_info['fieldname'],
        )
      );
    }
  }

  $output .= "\n}\n";
  return $output;
}

/**
 * Create random RGB element.
 */
function productivity_issue_diagram_random_color_part() {
  return str_pad( dechex( mt_rand( 0, 255 ) ), 2, '0', STR_PAD_LEFT);
}

/**
 * Create random RGB color.
 */
function productivity_issue_diagram_random_color() {
  return '#' . productivity_issue_diagram_random_color_part() . productivity_issue_diagram_random_color_part() . productivity_issue_diagram_random_color_part();
}

/**
 * Create a subgraph
 */
function productivity_issue_diagram_graph_generate_subgraph($name, $subgraph_info) {
  $label = $subgraph_info['label'];
  unset($subgraph_info['label']);
  unset($subgraph_info['group']);

  $output = "subgraph $name {\n";
  $output .= 'label = "' . check_plain($label) . '"' . "\n";

  foreach ($subgraph_info as $node_name => $node_info) {
    $output .= productivity_issue_diagram_graph_generate_node($node_name, $node_info);
  }

  $output .= "}\n";
  return $output;
}

/**
 * Create a single node box.
 */
function productivity_issue_diagram_graph_generate_node($name, $node_info) {
  // Merge in defaults.
  $node_info += array(
    'title' => $name,
    'properties' => array(),
    'fields' => array(),
    'methods' => array(),
  );

  $label  = $node_info['title'] . '|';

  foreach ($node_info['properties'] as $property_name => $property_info) {
    $property_info += array(
      'type' => '',
    );
    $label .= $property_name . ' : ' . $property_info['type'] . '\l';
  }

  $label .= '|';

  foreach ($node_info['fields'] as $field_name => $field_info) {
    $field_info += array(
      'type' => '',
    );
    $label .= $field_name . ' : ' . $field_info['type'] . '|';
  }

  return $name . ' [ label = "{' . check_plain($label) . '}" ]';
}
