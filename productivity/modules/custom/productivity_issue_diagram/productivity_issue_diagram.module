<?php
/**
 * @file
 * Code for the entity relationship graph.
 */
/**
 * Implements hook_menu().
 */
function productivity_issue_diagram_menu() {
  $items['admin/reports/issue-diagram/%'] = array(
    'title' => 'Issue Diagram',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'productivity_issue_diagram_menu_callback',
    'page arguments' => array(3),
    'access arguments' => array('administer content'),
  );
  return $items;
}

/**
 * Main function to create full graph of entities.
 *
 * @param
 *  $entity_type - Pass on and anetity type to render only.
 */
function productivity_issue_diagram_menu_callback($project_nid) {
  drupal_add_js('http://mdaines.github.io/viz.js/bower_components/viz.js/viz.js', 'file');

  $data = 'var dataSVG = `' . productivity_issue_diagram_graph_generate(productivity_issue_diagram_graph($project_nid)) . '`;';
  drupal_add_js($data, 'inline');

  drupal_add_js(drupal_get_path('module', 'productivity_issue_diagram') . '/productivity_issue_diagram.js', 'file');
  return '';
}


/**
 * Get entity reference connections.
 */
function productivity_issue_diagram_graph_connections($project_nid) {

  // List of links for projects.
  $query = db_select('node', 'n');
  $query
    ->join('field_data_field_project', 'p', 'n.nid = p.entity_id');
  $query
    ->leftJoin('field_data_field_time_estimate', 'e', 'n.nid = e.entity_id');
  $query
    ->leftJoin('field_data_field_issue_id', 'i', 'n.nid = i.entity_id');
  $query
    ->leftJoin('field_data_field_github_content_type', 'ct', 'n.nid = ct.entity_id');
  $query
    ->leftJoin('field_data_field_issue_reference', 'ir', 'n.nid = ir.entity_id');
  // Field on GH issue.
  $query
    ->leftJoin('field_data_field_actual_hours', 'ah', 'n.nid = ah.entity_id');
  // Join time tracking node
//  $query
//    ->leftJoin('field_data_field_github_issue', 'gh', 'n.nid = gh.entity_id');
//  //  Join issue log multifiled
//  $query
//    ->leftJoin('field_data_field_issue_logs', 'il', 'gh.nid = il.entity_id');
//

  $query
    ->fields('n', array('title', 'nid'))
    ->fields('e', array('field_time_estimate_value'))
    ->fields('i', array('field_issue_id_value'))
    ->fields('ct', array('field_github_content_type_value'))
    ->fields('ir', array('field_issue_reference_target_id '))
    ->fields('ah', array('field_actual_hours_value'))
//    ->fields('il', array('field_actual_hours_value'))
    ->condition('p.field_project_target_id', $project_nid)
    ->condition('type', 'github_issue')
    ->condition('status', NODE_PUBLISHED);
  $result = $query->execute();

  // Create an associative array:
  $issues = array();
  while($record = $result->fetchAssoc()) {
    $issues[$record['nid']] = array(
      'nid' => $record['nid'],
      'title' => $record['title'],
      'estimate' => $record['field_time_estimate_value'],
      'issue_id' => $record['field_issue_id_value'],
      'type' => $record['field_github_content_type_value'],
      'related_issue' => $record['field_issue_reference_target_id'],
      'actual' => $record['field_actual_hours_value'],
    );
  }

  return $issues;
}

function productivity_issue_diagram_tracking($project_nid) {

  // List of links for projects.
  $query = db_select('node', 'n');
  $query
    ->join('field_data_field_project', 'p', 'n.nid = p.entity_id');
  //  Join issue log multifield.
  $query
    ->leftJoin('field_data_field_issues_logs', 'il', 'n.nid = il.entity_id');
  $query
    ->leftJoin('field_data_field_issue_id', 'i', 'il.field_issues_logs_field_github_issue_target_id = i.entity_id');

  $query
    ->fields('n', array('title', 'nid', 'uid'))
    ->fields('il', array(
      'field_issues_logs_field_github_issue_target_id',
      'field_issues_logs_field_issue_label_value',
      'field_issues_logs_field_time_spent_value',
      'field_issues_logs_field_issue_type_value',
      'field_issues_logs_id',
      )
    )
    ->fields('i', array('field_issue_id_value'))
    ->condition('p.field_project_target_id', $project_nid)
    ->condition('type', 'time_tracking')
    ->condition('status', NODE_PUBLISHED);
  $result = $query->execute();

  // Create an associative array:
  $tracking = array();
  while($record = $result->fetchAssoc()) {
    $related_nid = $record['field_issues_logs_field_github_issue_target_id'];
    $tracking[$related_nid][] = array(
      'nid' => $record['nid'],
      'mfid' => $record['field_issues_logs_id'],
      'uid' => $record['uid'],
      'issue_nid' => $related_nid,
      'issue_id' => $record['field_issue_id_value'],
      'label' => $record['field_issues_logs_field_issue_label_value'],
      'time' => $record['field_issues_logs_field_time_spent_value'],
      'type' => $record['field_issues_logs_field_issue_type_value'],
    );
  }
  dpm($tracking);
  return $tracking;
}

/**
 * Main function to create full graph of entities.
 */
function productivity_issue_diagram_graph($project_nid) {
  $graph = array();

  $graph['nodes']['group_issue']['label'] = 'Issues';
  $graph['nodes']['group_issue']['group'] = TRUE;
  $graph['nodes']['group_pr']['label'] = 'PR';
  $graph['nodes']['group_pr']['group'] = TRUE;
  $graph['nodes']['group_tracking']['label'] = 'tracking';
  $graph['nodes']['group_tracking']['group'] = TRUE;


  // Add tracking nodes.
  $tracking = productivity_issue_diagram_tracking($project_nid);
  foreach ($tracking as $tracks) {
    foreach ($tracks as $key => $track) {
      $graph['nodes']['group_tracking'][$track['mfid']] = array(
        'title' => 'Track: #' . ($track['issue_id'] ?: '0'),
        // Extra description inside node
        // Need to remove special char to fix this display.
        'properties' => array(
//          'title'  => $track['label'],
           $track['type'] => $track['time'],
          'uid' => $track['uid'],
          'nid' => $track['nid'],
        )
      );
    }
  }

  // Add issue nodes.
  $issues = productivity_issue_diagram_graph_connections($project_nid);
  foreach ($issues as $issue) {
    if ($issue['type'] == 'issue') {
      $graph['nodes']['group_issue'][$issue['nid']] = array(
        'title' => 'Issue #' . $issue['issue_id'],
        // Extra description inside node
        'properties' => array('Estimate' => $issue['estimate']),
      );
    }
    else {
      $graph['nodes']['group_pr'][$issue['nid']] = array(
        'title' => 'PR #' . $issue['issue_id'],
        // Extra description inside node
        'properties' => array('Hour reported' => $issue['actual']),
      );
    }
    // Add edge for PR to ISSUE.
    if ($issue['related_issue']) {
      $edge_info = array(
        // box, crow, curve, icurve, diamond, dot, inv, none, normal, tee, vee
        'arrowhead' => 'normal',
        'taillabel' => '',
        'headlabel' => '',
        'caption' => '',
      );

      $graph['edges'][$issue['nid']][$issue['related_issue']] = $edge_info;
    }

    // Add Edged from tracking to PR.
    if (isset($tracking[$issue['nid']])) {
      foreach ($tracking[$issue['nid']] as $track) {
        $edge_info = array(
          // box, crow, curve, icurve, diamond, dot, inv, none, normal, tee, vee
          'arrowhead' => 'box',
          'taillabel' => '',
          'headlabel' => '',
          'caption' => '',
        );

        $graph['edges'][$track['mfid']][$issue['nid']] = $edge_info;
      }
    }
  }
  dpm($graph);
  return $graph;
}


/**
 * Render graph into digraph format.
 * using https://en.wikipedia.org/wiki/DOT_(graph_description_language)
 */
function productivity_issue_diagram_graph_generate($graph) {
  // Merge in defaults.
  $graph += array(
    'nodes' => array(),
    'edges' => array(),
  );
  $output = "digraph G {\n";

  $output .= "node [\n";
  $output .= "shape = \"record\"\n";
  $output .= "]\n";

  foreach ($graph['nodes'] as $name => $node_info) {
    if (!empty($node_info['group'])) {
      $output .= productivity_issue_diagram_graph_generate_subgraph($name, $node_info);
    }
    else {
      $output .= productivity_issue_diagram_graph_generate_node($name, $node_info);
    }
  }

  foreach ($graph['edges'] as $source_node => $edges) {
    foreach ($edges as $target_node => $edge_info) {
      $output .= "edge [\n";
      // Edge properties.
      foreach ($edge_info as $k => $v) {
        $output .= ' "' . check_plain($k) . '" = "'. check_plain($v) . '"' . "\n";
      }
      $output .= "]\n";
      $color = productivity_issue_diagram_random_color();
      $output .= format_string('@source_node -> @target_node [color="@color"][label="@caption" fontcolor="@color"]',
        array(
          '@source_node' => $source_node,
          '@target_node' => $target_node,
          '@color' => $color,
          '@caption' => $edge_info['caption'],
        )
      );
    }
  }

  $output .= "\n}\n";
  return $output;
}

/**
 * Create random RGB element.
 */
function productivity_issue_diagram_random_color_part() {
  return str_pad( dechex( mt_rand( 0, 255 ) ), 2, '0', STR_PAD_LEFT);
}

/**
 * Create random RGB color.
 */
function productivity_issue_diagram_random_color() {
  return '#' . productivity_issue_diagram_random_color_part() . productivity_issue_diagram_random_color_part() . productivity_issue_diagram_random_color_part();
}

/**
 * Create a subgraph
 */
function productivity_issue_diagram_graph_generate_subgraph($name, $subgraph_info) {
  $label = $subgraph_info['label'];
  unset($subgraph_info['label']);
  unset($subgraph_info['group']);

  $output = "subgraph $name {\n";
  $output .= 'label = "' . check_plain($label) . '"' . "\n";

  foreach ($subgraph_info as $node_name => $node_info) {
    $output .= productivity_issue_diagram_graph_generate_node($node_name, $node_info);
  }

  $output .= "}\n";
  return $output;
}

/**
 * Create a single node box.
 */
function productivity_issue_diagram_graph_generate_node($name, $node_info) {
  // Merge in defaults.
  $node_info += array(
    'title' => $name,
    'properties' => array(),
  );

  $label  = $node_info['title'] . '|';

  foreach ($node_info['properties'] as $title => $value) {
    $label .= "$title  : $value |";
  }

  return $name . ' [ label = "{' . addslashes($label) . '}" ]';
}
