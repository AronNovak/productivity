<?php
/**
 * @file
 * Code for the Productivity time tracking feature.
 */

include_once 'productivity_time_tracking.features.inc';


/**
 * Get general days in a given month.
 */
function productivity_time_tracking_get_global_days($month, $year) {
  // Call the restfull service.
  $handler = restful_get_restful_handler('tracking');
  $request = array();
  $request['year'] = $year;
  $request['month'] = $month;
  $request['global'] = TRUE;
  $result = $handler->get('', $request);
  return $result;
}

/**
 * Total hours done in a project.
 *
 * @param $project_nid
 * @param array $date_range
 * @param array $employees
 * @return array
 */
function productivity_time_tracking_total_hours($project_nid, $date_range = array(), $employees = array()) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_day_type', 'value', 'regular')
    ->fieldCondition('field_project', 'target_id', $project_nid);

  $result = $query->execute();

  $total = array(
    'day' => 0,
    'hour' => 0,
  );
  if (!isset($result['node'])) {
    return $total;
  }

  foreach ($result['node'] as $res) {
    $wrapper = entity_metadata_wrapper('node', $res->nid);
    $total['hour'] += $wrapper->field_track_hours->value();
  }
  // TODO: make a better conversion for days, using count query.
  $total['day'] = $total['hour'] / 8;
  return $total;
}

/**
 * Implements hook_node_presave().
 *
 * Set the node title automatically.
 */
function productivity_time_tracking_node_presave($node) {
  if ($node->type == 'time_tracking') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $title =
      date('d M Y', $wrapper->field_work_date->value()) . ' - ' .
      ($wrapper->__isset('field_employee') ? ($wrapper->field_employee->label() . '-') : '') .
      ($wrapper->__isset('field_project') ? ($wrapper->field_project->label() . '-') : '') .
      $wrapper->field_day_type->value();
    $wrapper->title->set($title);
  }
}

/**
 * Implements hook_menu().
 *
 * Callback for mailgun.
 */
function productivity_time_tracking_menu() {
  $items = array();
  // Create a time tracking node(s) from mailGun JSON.
  $items['mailgun/get-tracking'] = array(
    'title' => 'Create time tracking',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_time_tracking_mail_create',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Upload file.
 */
function productivity_time_tracking_mail_create() {
  if (empty($_POST['X-Mailgun-Incoming']) || $_POST['X-Mailgun-Incoming'] != 'Yes') {
    watchdog('productivity_time_tracking', 'Return #46, $_POST[X-Mailgun-Incoming]: <pre>'. $_POST['X-Mailgun-Incoming'] .'</pre>');
    return;
  }
  $message = message_create('mailgun_incoming_mail', array(
    'arguments' => array(
      '@text' => print_r($_POST, TRUE)
    )
  ));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->save();
  // TODO: Save tracking entity.
}

/**
 * Send message to user if he doesn't have tracking for yesterday.
 *
 * This function should be runned every day.
 */
function productivity_time_tracking_send_reminder() {
  // Get the yesterday date for Brussels timezone.
  $yesterday_starts = date('Y-m-d 00:00:00', strtotime('-1 days') - 3600);
  $yesterday_ends = date('Y-m-d 23:59:59', strtotime('-1 days') - 3600);

  $dw = date( "N", strtotime('-1 days'));
  if ($dw == 5 || $dw == 6) {
    // Yesterday was Friday or Saturday, so there shouldn't be any records.
    return;
  }

  // Get emails of users that doesn't have items in tracking during the time
  // from $timestamp_starts to $timestamp_ends

  // Get all active developers, that should have tracking.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_job_type', 'value', 'developer')
    ->fieldCondition('field_employment_status', 'value', 'employed');
  $result = $query->execute();

  $users = !empty($result['user']) ? user_load_multiple(array_keys($result['user'])) : NULL;
  foreach ($users as $user) {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'time_tracking')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->propertyCondition('uid', $user->uid)
      ->fieldCondition('field_work_date', 'value', $yesterday_starts, '>=')
      ->fieldCondition('field_work_date', 'value', $yesterday_ends, '<=');

    $result = $query->execute();
    $no_records = TRUE;
    if ($result) {
      $no_records = FALSE;
    }

    if ($no_records) {
      $values = array(
        'body' => 'Please, fill work tracking for yesterday. http://productivity.gizra.com',
        'subject' => 'Productivity',
        'uid' => $user->uid
      );
      $message = message_create('catch_test_mail', $values);

      // Send mail to users
      message_notify_send_message($message);
    }
  }
}
