<?php
/**
 * @file
 * Code for the Productivity time tracking feature.
 */

include_once 'productivity_time_tracking.features.inc';


/**
 * Get general days in a given month.
 */
function productivity_time_tracking_get_global_days($month, $year) {
  // Call the restfull service.
  $handler = restful_get_restful_handler('tracking');
  $request = array();
  $request['year'] = $year;
  $request['month'] = $month;
  $request['global'] = TRUE;
  $result = $handler->get('', $request);
  return $result;
}

/**
 * Total hours done in a project.
 *
 * @param $project_nid
 * @param array $date_range
 * @param array $employees
 * @return array
 */
function productivity_time_tracking_total_hours($project_nid, $date_range = array(), $employees = array()) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_day_type', 'value', 'regular')
    ->fieldCondition('field_project', 'target_id', $project_nid);

  $result = $query->execute();

  $total = array(
    'day' => 0,
    'hour' => 0,
  );
  if (!isset($result['node'])) {
    return $total;
  }

  foreach ($result['node'] as $res) {
    $wrapper = entity_metadata_wrapper('node', $res->nid);
    $total['hour'] += $wrapper->field_track_hours->value();
  }
  // TODO: make a better conversion for days, using count query.
  $total['day'] = $total['hour'] / 8;
  return $total;
}

/**
 * Implements hook_node_presave().
 *
 * Set the node title automatically.
 */
function productivity_time_tracking_node_presave($node) {
  if ($node->type == 'time_tracking') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $title =
      date('d M Y', $wrapper->field_work_date->value()) . ' - ' .
      ($wrapper->__isset('field_employee') ? ($wrapper->field_employee->label() . '-') : '') .
      ($wrapper->__isset('field_project') ? ($wrapper->field_project->label() . '-') : '') .
      $wrapper->field_day_type->value();
    $wrapper->title->set($title);
  }
}

/**
 * Implements hook_menu().
 *
 * Callback for mailgun.
 */
function productivity_time_tracking_menu() {
  $items = array();
  // Create a time tracking node(s) from mailGun JSON.
  $items['mailgun/get-tracking'] = array(
    'title' => 'Create time tracking',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_time_tracking_mail_create',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Upload file.
 */
function productivity_time_tracking_mail_create() {
  if (empty($_POST['X-Mailgun-Incoming']) || $_POST['X-Mailgun-Incoming'] != 'Yes') {
    watchdog('productivity_time_tracking', 'Return #46, $_POST[X-Mailgun-Incoming]: <pre>'. $_POST['X-Mailgun-Incoming'] .'</pre>');
    return;
  }
  $message = message_create('mailgun_incoming_mail', array(
    'arguments' => array(
      '@text' => print_r($_POST, TRUE)
    )
  ));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->save();
  // TODO: Save tracking entity.
}

/**
 * Send message to user if he doesn't have tracking for yesterday.
 *
 * @param $account
 * User object.
 */
function productivity_time_tracking_send_reminder($account) {
  // Get the yesterday date for Brussels timezone.
  $yesterday_starts = date('Y-m-d 00:00:00', strtotime('-1 days') - 3600);
  $yesterday_ends = date('Y-m-d 23:59:59', strtotime('-1 days') - 3600);

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('uid', $account->uid)
    ->fieldCondition('field_work_date', 'value', $yesterday_starts, '>=')
    ->fieldCondition('field_work_date', 'value', $yesterday_ends, '<=')
    ->execute();
  $no_records = TRUE;
  if ($result) {
    $no_records = FALSE;
  }

  if ($no_records) {
    $values = array(
      'subject' => 'Productivity',
      'uid' => $account->uid
    );
    $message = message_create('mail_reminder', $values);

    $wrapper = entity_metadata_wrapper('user', $account);

    $wrapper->field_last_notification->set(time() + 3600);
    $wrapper->save();
    // Send mail to users
    message_notify_send_message($message);
  }
}

/**
 * Implements hook_cron().
 *
 * Should send reminder to existing developers, that did not filled time tracking
 * yesterday.
 */
function productivity_time_tracking_cron() {

  $now = date('H', time() + 3600);
  if (intval($now) < 9 || intval($now) > 11) {
    // Send notifications only between 9 and 11 in the morning.
     return;
  }

  $weekend = variable_get('productivity_weekend', '5,6');
  $days = explode(',', $weekend);
  $dw = date( "N", strtotime('-1 days'));
  // Yesterday was weekend, so there shouldn't be any records.
  foreach($days as $day) {
    if ($dw == $day) {
      return;
    }
  }

  // Select users that don't have time tracking records during the whole
  // previous day.

  // Get all active developers, that should have tracking.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_job_type', 'value', 'developer')
    ->fieldCondition('field_employment_status', 'value', 'employed')
    ->execute();

  $accounts = !empty($result['user']) ? user_load_multiple(array_keys($result['user'])) : NULL;
  foreach ($accounts as $account) {
    // Check if this user has already got notification today.
    $wrapper = entity_metadata_wrapper('user', $account);

    if (empty($wrapper->field_last_notification) || $wrapper->field_last_notification->value() < strtotime(date('Y-m-d 00:00:00', time() + 3600))) {
      // Today notifications haven't been sent yet.
      productivity_time_tracking_send_reminder($account);
    }
  }
}
