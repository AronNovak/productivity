<?php
/**
 * @file
 * Code for the Productivity time tracking feature.
 */

include_once 'productivity_time_tracking.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a custom field ("Hours to count as one day") to the admin form "site information".
 * URL: admin/config/system/site-information.
 */
function productivity_time_tracking_form_system_site_information_settings_alter(&$form, &$form_state) {
  $form['productivity_time_tracking_hours_count_as_day'] = array(
    '#type' => 'textfield',
    '#title' => t('Hours to count as one day'),
    '#default_value' => variable_get('productivity_time_tracking_hours_count_as_day'),
  );
  $form['productivity_time_tracking_managers_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Managers email'),
    '#default_value' => variable_get('productivity_time_tracking_managers_email'),
  );
}

/**
 * Get general days in a given month.
 */
function productivity_time_tracking_get_global_days($month, $year) {
  // Call the restfull service.
  $handler = restful_get_restful_handler('tracking');
  $request = array();
  $request['year'] = $year;
  $request['month'] = $month;
  $request['global'] = TRUE;
  $result = $handler->get('', $request);

  // Normalize global days.
  $assoc_globals = array();
  foreach ($result as $gday) {
    $assoc_globals[$gday['day']] = array(
      'id' => 'new',
      'length' => 'G',
      'type' => 'global',
      'day' => (string) $gday['day'],
      'projectName' => $gday['description'],
    );
  }
  return $assoc_globals;
}

/**
 * Save tracking using service.
 */
function productivity_time_tracking_save($timestamp, $employee, $project_nid) {
  // Call the restfull service.
  $handler = restful_get_restful_handler('tracking');
  $request = array();
  $request['date'] = $timestamp;
  $request['employee'] = $employee;
  $request['projectID'] = $project_nid;
  $request['type'] = 'regular';
  $request['length'] = 8.0;
  $request['period'] = 'hour';
  $request['description'] = 'Automated with bulk';

  $result = $handler->post('', $request);

  return $result;
}

/**
 * Total hours done in a project.
 *
 * @param $project_nid
 * @param array $date_range
 * @param array $employees
 * @return array
 */
function productivity_time_tracking_get_employee_tracking_count($strtime, $employee) {
  $query = new EntityFieldQuery();
  $account = user_load_by_name($employee);
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_work_date', 'value', $strtime)
    ->fieldCondition('field_employee', 'target_id', $account->uid)
    ->count();

  return $query->execute();
}

/**
 * Calculate the number of days on a certain project.
 *
 * Counts number of entries which has a certain number of hours (productivity_time_tracking_hours_count_as_day)
 * as days and sums up the remaining hours and divides them on "hours_count_as_day"
 * to calculate the number of the remaining days.
 *
 * @param float $project_nid
 *    The node ID of the project.
 * @param array $date
 *    The range to add up the days.
 * @param stdClass $account
 *    The account of the user.
 *
 * @return float
 *    The number of days in the project.
 */
function productivity_time_tracking_total_days($project_nid, $date = array(),  $account = NULL) {
  // If the variable "hours_count_as_day" is not set, The default day is 8 Hours.
  $hours_as_day = variable_get('productivity_time_tracking_hours_count_as_day', 8);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_track_hours', 'value', $hours_as_day, '>=')
    ->fieldCondition('field_project', 'target_id', $project_nid)
    ->addMetaData('account', $account)
    ->count();

  if (!empty($date)) {
    $start_date =  $date['year'] . '-' . $date['month'] . '-01'. ' 00:00:00';
    $end_date = date('Y-m-d 00:00:00', strtotime('+1 month', strtotime($start_date)));
    $query->fieldCondition('field_work_date', 'value', array($start_date, $end_date), 'BETWEEN');
  }

  $days_count = $query->execute();

  // Calculate the remaining hours in the project.
  // Using 'db_select' because we need the SUM.
  $fragments_query = db_select('field_data_field_track_hours', 'h');
  $fragments_query->leftJoin('field_data_field_project', 'p', 'h.entity_id = p.entity_id');
  // If Date range is given, calculate within that period.
  if (!empty($date)) {
    $fragments_query->leftJoin('field_data_field_work_date', 'd', 'h.entity_id = d.entity_id');
    $fragments_query->condition("field_work_date_value", array($start_date, $end_date), 'BETWEEN');
  }

  $fragments_query
    ->condition("field_track_hours_value", $hours_as_day, '<')
    ->condition('field_project_target_id', $project_nid, '=');


  $fragments_query->addExpression('SUM(field_track_hours_value)', 'sum_of_hours');

  $remaining_hours = $fragments_query->execute()->fetchAll();

  if (!empty($remaining_hours)) {
    $days_count = ($remaining_hours[0]->sum_of_hours / $hours_as_day) + $days_count;
  }

  return $days_count;
}

/**
 * Total hours done in a project.
 *
 * @param $project_nid
 * @param array $date
 * @param bool $account
 *
 * @return array
 */
function productivity_time_tracking_total_hours($project_nid, $date = array(), $account = FALSE) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'time_tracking')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_day_type', 'value', 'regular')
    ->addMetaData('account', $account)
    ->fieldCondition('field_project', 'target_id', $project_nid);

  if (!empty($date)) {
    $start_date =  $date['year'] . '-' . $date['month'] . '-01'. ' 00:00:00';
    $end_date = date('Y-m-d 00:00:00', strtotime('+1 month', strtotime($start_date)));
    $query->fieldCondition('field_work_date', 'value', $start_date, '>=');
    $query->fieldCondition('field_work_date', 'value', $end_date, '<');
  }

  $result = $query->execute();

  $total = array(
    'day' => 0,
    'hour' => 0,
  );
  if (!isset($result['node'])) {
    return $total;
  }

  foreach ($result['node'] as $res) {
    $wrapper = entity_metadata_wrapper('node', $res->nid);
    $total['hour'] += $wrapper->field_track_hours->value();
  }
  $total['day'] = productivity_time_tracking_total_days($project_nid, $date, $account);
  return $total;
}

/**
 * Implements hook_node_presave().
 *
 * Set the node title automatically.
 * Update parent project's days/hours accordingly.
 */
function productivity_time_tracking_node_presave($node) {

  if ($node->type != 'time_tracking') {
    // Not a time tracking node.
    return;
  }
  $wrapper = entity_metadata_wrapper('node', $node);
  $title =
    date('d M Y', $wrapper->field_work_date->value()) . ' - ' .
    ($wrapper->__isset('field_employee') ? ($wrapper->field_employee->label() . '-') : '') .
    ($wrapper->__isset('field_project') ? ($wrapper->field_project->label() . '-') : '') .
    $wrapper->field_day_type->value();

  $wrapper->title->set($title);

  // Add days/hours to parent project's total.
  if ($wrapper->field_day_type->value() != 'regular') {
    // Done.
    return;
  }

  // Update field_track_hours from total all multi field.
  $total = 0;
  foreach($wrapper->field_issues_logs as $field_wrapper) {
    $total += $field_wrapper->field_time_spent->value();
  }
  $wrapper->field_track_hours->set($total);

  if ($wrapper->field_project->value()) {
    // Add hours to the project's relevant scope.
    productivity_project_update_project_total_hours($wrapper);
    // Notification for major milestone meeting.
    // TODO: improve by sending an invite to calendar meeting.
    productivity_project_logged_hours_notify($wrapper->field_project->value());
  }
}

/**
 * Implements hook_menu().
 *
 * Callback for mailgun.
 */
function productivity_time_tracking_menu() {
  $items = array();
  // Create a time tracking node(s) from mailGun JSON.
  $items['mailgun/get-tracking'] = array(
    'title' => 'Create time tracking',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_time_tracking_mail_create',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Upload file.
 */
function productivity_time_tracking_mail_create() {
  if (empty($_POST['X-Mailgun-Incoming']) || $_POST['X-Mailgun-Incoming'] != 'Yes') {
    watchdog('productivity_time_tracking', 'Return #46, $_POST[X-Mailgun-Incoming]: <pre>'. $_POST['X-Mailgun-Incoming'] .'</pre>');
    return;
  }
  $message = message_create('mailgun_incoming_mail', array(
    'arguments' => array(
      '@text' => print_r($_POST, TRUE)
    )
  ));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->save();
  // TODO: Save tracking entity.
}

/**
 * Send message to user if he/she doesn't have tracking for yesterday.
 *
 * @param $account
 *  User object.
 */
function productivity_time_tracking_send_reminder($account) {
  // Get the yesterday date.
  $yesterday_starts = date('Y-m-d 00:00:00', strtotime('-1 days'));
  $yesterday_ends = date('Y-m-d 23:59:59', strtotime('-1 days'));

  $query = db_select('field_data_field_work_date', 'd');
  $query->leftJoin('node', 'n', 'd.entity_id = n.nid');

  $results = $query->fields('d', array('entity_id'))
    ->condition("field_work_date_value", array($yesterday_starts, $yesterday_ends), 'BETWEEN')
    ->condition("type", "time_tracking")
    ->condition("status", NODE_PUBLISHED)
    ->condition("uid", $account->uid)
    ->execute()
    ->fetchAll();

  // Don't send a message when we have logged work from yesterday.
  if (!empty($results)) {
    return;
  }

  $values = array(
    'subject' => 'Productivity',
    'uid' => $account->uid
  );
  $message = message_create('mail_reminder', $values);

  $wrapper = entity_metadata_wrapper('user', $account);

  $wrapper->field_last_notification->set(time());
  $wrapper->save();
  // Send mail to users
  message_notify_send_message($message);
}

/**
 * Implements hook_cron().
 *
 * Send reminder to existing developers,
 * That did not filled time tracking yesterday.
 */
function productivity_time_tracking_cron() {

  $now = date('H', time());
  $timetosend = explode('-', variable_get('time_to_send_reminder', '9-13'));
  if (intval($now) < $timetosend[0] || intval($now) > $timetosend[1]) {
    // Send notifications in defined time period.
    return;
  }

  $weekend = variable_get('productivity_weekend', '5,6');
  $days = explode(',', $weekend);
  $dw = date('N', strtotime('-1 days'));
  // Yesterday was weekend, so there shouldn't be any records.
  foreach($days as $day) {
    if ($dw == $day) {
      return;
    }
  }

  // Select users that don't have time tracking records during the whole
  // previous day.

  // Get all active developers, that should have tracking.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_job_type', 'value', 'developer')
    ->fieldCondition('field_employment_status', 'value', 'employed')
    ->execute();

  if (empty($result['user'])) {
    // There are no active employed developers.
    return;
  }

  $accounts = user_load_multiple(array_keys($result['user']));
  foreach ($accounts as $account) {
    // Check if this user has already got notification today.
    $wrapper = entity_metadata_wrapper('user', $account);
    if ($wrapper->field_last_notification->value() >= strtotime(date('Y-m-d 00:00:00', time()))) {
      // Notification has been already sent today.
      continue;
    }
    productivity_time_tracking_send_reminder($account);
  }
}

/**
 * Implements hook_token_info().
 */
function productivity_time_tracking_token_info() {
  $info['tokens']['date']['yesterday'] = array(
    'name' => t('Yesterday date'),
    'description' => t('Returns the yesterday date in format "YYYY/M/D"'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function productivity_time_tracking_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

    if (isset($tokens['yesterday']) && isset($data['date'])) {
      $replacements[$tokens['yesterday']] = date('Y/m/d', $data['date'] - 86400);
    }

  return $replacements;
}

/**
 * Bulk update time tracking.
 */
/**
 * Implements hook_element_info().
 */
function productivity_time_tracking_bulk_update($month, $year, $employee, $project_nid) {
  $globals = productivity_time_tracking_get_global_days($month, $year);
  $last_day_this_month  = date('t', strtotime('1.' . $month . '.' . $year));
  // Save all days that are empty.
  for ($i = 1; $i <= $last_day_this_month; $i++) {

    $timestamp = strtotime($i . '.' . $month . '.' . $year);
    $week_day = date( "w", $timestamp);
    // Bypass Friday or Saturday.
    if (in_array($week_day, array(5, 6))) {
      continue;
    }
    // Bypass Globals.
    if (isset($globals[str_pad($i, 2, '0', STR_PAD_LEFT)])) {
      continue;
    }
    $strtime =  "$year-$month-$i 00:00:00";
    if (!productivity_time_tracking_get_employee_tracking_count($strtime, $employee)) {
      productivity_time_tracking_save($timestamp, $employee, $project_nid);
    }
    else {
      dpm('Bypass saving for ' . $i);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function productivity_time_tracking_node_update($node) {
  if ($node->type != 'time_tracking') {
    return;
  }

  _productivity_time_tracking_update_issue($node);
}

/**
 * Implements hook_node_insert().
 */
function productivity_time_tracking_node_insert($node) {
  if ($node->type != 'time_tracking') {
    return;
  }

  _productivity_time_tracking_update_issue($node);
}

/**
 * Update the issue node with time tracking data.
 *
 * @param $node
 *   Time tracking node that has been updated or inserted.
 */
function _productivity_time_tracking_update_issue($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Skip updating the issue node if something is wrong.
  $skip_issue_update = FALSE;

  $old_count = 0;

  if (empty($node->is_new)) {
    $original_wrapper = entity_metadata_wrapper('node', $node->original);
    $old_count = $original_wrapper->field_issues_logs->count();
  }

  foreach($wrapper->field_issues_logs as $key => $field_wrapper) {
    if ($field_wrapper->__isset('field_github_issue')) {
      // Re-calculate how many hours were worked on the issue that the time
      // tracking is referencing, or the issue that's referenced by the pull
      // request the node is referencing.

      $old_track_time = 0;
      // This is an update to the tracking, update data correctly.
      if ($key + 1 < $old_count ) {
        // Order of the multifield shouldn't change.
        $old_track_time = $original_wrapper->field_issues_logs->get($key)->field_time_spent->value();
      }

      // Note that this could be either a pull request or an issue.
      if ($field_wrapper->__isset('field_github_issue')) {

        $github_issue_wrapper = $field_wrapper->field_github_issue;
        if ($github_issue_wrapper->value() && $github_issue_wrapper->field_github_content_type->value() != 'issue') {

          if ($github_issue_wrapper->__isset('field_issue_reference')) {
            // Pointing at a pull request - get the issue wrapper.
            $github_issue_wrapper = $github_issue_wrapper->field_issue_reference;
          }
          else {
            // This pull request does not have an issue. Can't calculate total
            // issue hours.
            $skip_issue_update = TRUE;
          }
        }

        if (!$skip_issue_update && $github_issue_wrapper->getBundle() == 'github_issue') {
          // Calculate the total hours worked on the issue.
          $issue_hours = productivity_github_sum_issue_hours($github_issue_wrapper->getIdentifier());

          // Save this value into the issue node.
          $github_issue_wrapper->field_actual_hours->set($issue_hours);
          $github_issue_wrapper->save();
        }
        else {
          watchdog(WATCHDOG_NOTICE, 'Github issue for time tracking node @node_title not found, might cause problems in the issue tracking table', array('@node_title' => $wrapper->label()));
        }
      }
    }
  }
}

