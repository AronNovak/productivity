<?php
/**
 * @file
 * Code for the Productivity session feature.
 */

include_once 'productivity_timewatch.features.inc';


/**
 * Implements hook_ctools_plugin_directory().
 */
function productivity_timewatch_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Find a user by pincode.
 *
 * @param string $pincode
 *  A pincode
 *
 * @return int|NULL
 *  User ID.
 */
function productivity_timewatch_get_uid_by_pincode($pincode) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_pincode', 'value', $pincode)
    ->range(0, 1)
    ->execute();

  return !empty($result['user']) ? key($result['user']) : NULL;
}

/**
 * Implements hook_user_presave().
 */
function productivity_timewatch_user_presave(&$edit, $account, $category) {
  if (empty($edit['field_pincode'][LANGUAGE_NONE][0]['value'])) {
    // Ignore users without pincode.
    return;
  }

  $pincode = $edit['field_pincode'][LANGUAGE_NONE][0]['value'];

  // Check if this pincode is already used by another user.
  $uid = productivity_timewatch_get_uid_by_pincode($pincode);
  if ($uid && $uid != $account->uid) {
    throw new \Exception('Please choose a different pincode.');
  }
}

/**
 * Implements hook_node_presave().
 *
 * Deleting drupal's default end date (When saving the session through drupal's
 * form, it sets the end date to be the same as the start date by default).
 */
function productivity_timewatch_node_presave($node) {
  if ($node->type != 'work_session') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $date = $wrapper->field_session_date->value();
  // Delete the end date in case it's identical to the start date.
  if ($date['value'] == $date['value2']) {
    $wrapper->field_session_date->value2->set(NULL);
  }

  // Set title.
  $employee = $wrapper->field_employee->label();
  $day = date('d/m/y', $date['value']);
  $node->title = format_string('@date - @user', array('@date' => $day, '@user' => $employee));
}

/**
 * Implements hook_permission().
 */
function productivity_timewatch_permission() {
  return array(
    'timewatch punch' => array(
      'title' => t('Timewatch punch'),
      'description' => t('Start or end a work session.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove inactive employees and irrelevant projects from the timewatch form.
 */
function productivity_timewatch_form_work_session_node_form_alter(&$form, &$form_state) {
  // Hide the title.
  $form['title']['#access'] = FALSE;


  // Display only active employees.
  $uids = array();
  $wrapper = entity_metadata_wrapper('node', $form['#node']);

  // Get all active employees.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_employment_status', 'value', 'employed')
    ->propertyOrderBy('name')
    ->execute();
  if (!empty($result['user'])) {
    $uids = array_keys($result['user']);
  }

  // Make sure the selected employee is in the list, even if they're not active.
  if ($wrapper->field_employee->value()) {
    $uid = $wrapper->field_employee->getIdentifier();
    if (!in_array($uid, $uids)) {
      array_unshift($uids, $uid);
    }
  }
  // Build the options list.
  $options = array('_none' => '- ' . t('Select employee') . ' -');
  foreach(user_load_multiple($uids) as $account) {
    $options[$account->uid] = $account->name;
  }
  $form['field_employee'][LANGUAGE_NONE]['#options'] = $options;


  // Display only projects that are marked as "Referencable by work sessions".
  $nids = array();
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_allow_session_reference', 'value', TRUE)
    ->propertyOrderBy('title')
    ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
  }

  // Make sure the selected project is in the list, even if it's non-
  // referencable.
  if ($wrapper->field_project->value()) {
    $nid = $wrapper->field_project->getIdentifier();
    if (!in_array($nid, $nids)) {
      array_unshift($nids, $nid);
    }
  }
  $options = array('_none' => '- ' . t('None') . ' -');
  foreach(node_load_multiple($nids) as $node) {
    $options[$node->nid] = $node->title;
  }
  $form['field_project'][LANGUAGE_NONE]['#options'] = $options;
}
